/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_NBD_GENERATED_TRACERS_H
#define TRACE_NBD_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_NBD_UNKNOWN_ERROR_EVENT;
extern TraceEvent _TRACE_NBD_SEND_OPTION_REQUEST_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_OPTION_REPLY_EVENT;
extern TraceEvent _TRACE_NBD_REPLY_ERR_UNSUP_EVENT;
extern TraceEvent _TRACE_NBD_OPT_GO_START_EVENT;
extern TraceEvent _TRACE_NBD_OPT_GO_SUCCESS_EVENT;
extern TraceEvent _TRACE_NBD_OPT_GO_INFO_UNKNOWN_EVENT;
extern TraceEvent _TRACE_NBD_OPT_GO_INFO_BLOCK_SIZE_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_QUERY_EXPORTS_START_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_QUERY_EXPORTS_SUCCESS_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_STARTTLS_REQUEST_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_STARTTLS_REPLY_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_STARTTLS_NEW_CLIENT_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_STARTTLS_TLS_HANDSHAKE_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_NEGOTIATE_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_NEGOTIATE_MAGIC_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_NEGOTIATE_SERVER_FLAGS_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_NEGOTIATE_DEFAULT_NAME_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_NEGOTIATE_SIZE_FLAGS_EVENT;
extern TraceEvent _TRACE_NBD_INIT_SET_SOCKET_EVENT;
extern TraceEvent _TRACE_NBD_INIT_SET_BLOCK_SIZE_EVENT;
extern TraceEvent _TRACE_NBD_INIT_SET_SIZE_EVENT;
extern TraceEvent _TRACE_NBD_INIT_TRAILING_BYTES_EVENT;
extern TraceEvent _TRACE_NBD_INIT_SET_READONLY_EVENT;
extern TraceEvent _TRACE_NBD_INIT_FINISH_EVENT;
extern TraceEvent _TRACE_NBD_CLIENT_LOOP_EVENT;
extern TraceEvent _TRACE_NBD_CLIENT_LOOP_RET_EVENT;
extern TraceEvent _TRACE_NBD_CLIENT_CLEAR_QUEUE_EVENT;
extern TraceEvent _TRACE_NBD_CLIENT_CLEAR_SOCKET_EVENT;
extern TraceEvent _TRACE_NBD_SEND_REQUEST_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_REPLY_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_SEND_REP_LEN_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_SEND_REP_ERR_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_SEND_REP_LIST_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_HANDLE_EXPORT_NAME_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_HANDLE_EXPORT_NAME_REQUEST_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_SEND_INFO_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_HANDLE_INFO_REQUESTS_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_HANDLE_INFO_REQUEST_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_HANDLE_INFO_BLOCK_SIZE_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_HANDLE_STARTTLS_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_HANDLE_STARTTLS_HANDSHAKE_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_OPTIONS_FLAGS_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_OPTIONS_CHECK_MAGIC_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_OPTIONS_CHECK_OPTION_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_BEGIN_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_OLD_STYLE_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_NEW_STYLE_SIZE_FLAGS_EVENT;
extern TraceEvent _TRACE_NBD_NEGOTIATE_SUCCESS_EVENT;
extern TraceEvent _TRACE_NBD_RECEIVE_REQUEST_EVENT;
extern TraceEvent _TRACE_NBD_SEND_REPLY_EVENT;
extern TraceEvent _TRACE_NBD_BLK_AIO_ATTACHED_EVENT;
extern TraceEvent _TRACE_NBD_BLK_AIO_DETACH_EVENT;
extern TraceEvent _TRACE_NBD_CO_SEND_REPLY_EVENT;
extern TraceEvent _TRACE_NBD_CO_RECEIVE_REQUEST_DECODE_TYPE_EVENT;
extern TraceEvent _TRACE_NBD_CO_RECEIVE_REQUEST_PAYLOAD_RECEIVED_EVENT;
extern TraceEvent _TRACE_NBD_CO_RECEIVE_REQUEST_CMD_WRITE_EVENT;
extern TraceEvent _TRACE_NBD_TRIP_EVENT;
extern uint16_t _TRACE_NBD_UNKNOWN_ERROR_DSTATE;
extern uint16_t _TRACE_NBD_SEND_OPTION_REQUEST_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_OPTION_REPLY_DSTATE;
extern uint16_t _TRACE_NBD_REPLY_ERR_UNSUP_DSTATE;
extern uint16_t _TRACE_NBD_OPT_GO_START_DSTATE;
extern uint16_t _TRACE_NBD_OPT_GO_SUCCESS_DSTATE;
extern uint16_t _TRACE_NBD_OPT_GO_INFO_UNKNOWN_DSTATE;
extern uint16_t _TRACE_NBD_OPT_GO_INFO_BLOCK_SIZE_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_QUERY_EXPORTS_START_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_QUERY_EXPORTS_SUCCESS_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_STARTTLS_REQUEST_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_STARTTLS_REPLY_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_STARTTLS_NEW_CLIENT_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_STARTTLS_TLS_HANDSHAKE_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_NEGOTIATE_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_NEGOTIATE_MAGIC_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_NEGOTIATE_SERVER_FLAGS_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_NEGOTIATE_DEFAULT_NAME_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_NEGOTIATE_SIZE_FLAGS_DSTATE;
extern uint16_t _TRACE_NBD_INIT_SET_SOCKET_DSTATE;
extern uint16_t _TRACE_NBD_INIT_SET_BLOCK_SIZE_DSTATE;
extern uint16_t _TRACE_NBD_INIT_SET_SIZE_DSTATE;
extern uint16_t _TRACE_NBD_INIT_TRAILING_BYTES_DSTATE;
extern uint16_t _TRACE_NBD_INIT_SET_READONLY_DSTATE;
extern uint16_t _TRACE_NBD_INIT_FINISH_DSTATE;
extern uint16_t _TRACE_NBD_CLIENT_LOOP_DSTATE;
extern uint16_t _TRACE_NBD_CLIENT_LOOP_RET_DSTATE;
extern uint16_t _TRACE_NBD_CLIENT_CLEAR_QUEUE_DSTATE;
extern uint16_t _TRACE_NBD_CLIENT_CLEAR_SOCKET_DSTATE;
extern uint16_t _TRACE_NBD_SEND_REQUEST_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_REPLY_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_SEND_REP_LEN_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_SEND_REP_ERR_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_SEND_REP_LIST_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_HANDLE_EXPORT_NAME_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_HANDLE_EXPORT_NAME_REQUEST_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_SEND_INFO_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_HANDLE_INFO_REQUESTS_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_HANDLE_INFO_REQUEST_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_HANDLE_INFO_BLOCK_SIZE_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_HANDLE_STARTTLS_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_HANDLE_STARTTLS_HANDSHAKE_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_OPTIONS_FLAGS_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_OPTIONS_CHECK_MAGIC_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_OPTIONS_CHECK_OPTION_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_BEGIN_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_OLD_STYLE_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_NEW_STYLE_SIZE_FLAGS_DSTATE;
extern uint16_t _TRACE_NBD_NEGOTIATE_SUCCESS_DSTATE;
extern uint16_t _TRACE_NBD_RECEIVE_REQUEST_DSTATE;
extern uint16_t _TRACE_NBD_SEND_REPLY_DSTATE;
extern uint16_t _TRACE_NBD_BLK_AIO_ATTACHED_DSTATE;
extern uint16_t _TRACE_NBD_BLK_AIO_DETACH_DSTATE;
extern uint16_t _TRACE_NBD_CO_SEND_REPLY_DSTATE;
extern uint16_t _TRACE_NBD_CO_RECEIVE_REQUEST_DECODE_TYPE_DSTATE;
extern uint16_t _TRACE_NBD_CO_RECEIVE_REQUEST_PAYLOAD_RECEIVED_DSTATE;
extern uint16_t _TRACE_NBD_CO_RECEIVE_REQUEST_CMD_WRITE_DSTATE;
extern uint16_t _TRACE_NBD_TRIP_DSTATE;
#define TRACE_NBD_UNKNOWN_ERROR_ENABLED 1
#define TRACE_NBD_SEND_OPTION_REQUEST_ENABLED 1
#define TRACE_NBD_RECEIVE_OPTION_REPLY_ENABLED 1
#define TRACE_NBD_REPLY_ERR_UNSUP_ENABLED 1
#define TRACE_NBD_OPT_GO_START_ENABLED 1
#define TRACE_NBD_OPT_GO_SUCCESS_ENABLED 1
#define TRACE_NBD_OPT_GO_INFO_UNKNOWN_ENABLED 1
#define TRACE_NBD_OPT_GO_INFO_BLOCK_SIZE_ENABLED 1
#define TRACE_NBD_RECEIVE_QUERY_EXPORTS_START_ENABLED 1
#define TRACE_NBD_RECEIVE_QUERY_EXPORTS_SUCCESS_ENABLED 1
#define TRACE_NBD_RECEIVE_STARTTLS_REQUEST_ENABLED 1
#define TRACE_NBD_RECEIVE_STARTTLS_REPLY_ENABLED 1
#define TRACE_NBD_RECEIVE_STARTTLS_NEW_CLIENT_ENABLED 1
#define TRACE_NBD_RECEIVE_STARTTLS_TLS_HANDSHAKE_ENABLED 1
#define TRACE_NBD_RECEIVE_NEGOTIATE_ENABLED 1
#define TRACE_NBD_RECEIVE_NEGOTIATE_MAGIC_ENABLED 1
#define TRACE_NBD_RECEIVE_NEGOTIATE_SERVER_FLAGS_ENABLED 1
#define TRACE_NBD_RECEIVE_NEGOTIATE_DEFAULT_NAME_ENABLED 1
#define TRACE_NBD_RECEIVE_NEGOTIATE_SIZE_FLAGS_ENABLED 1
#define TRACE_NBD_INIT_SET_SOCKET_ENABLED 1
#define TRACE_NBD_INIT_SET_BLOCK_SIZE_ENABLED 1
#define TRACE_NBD_INIT_SET_SIZE_ENABLED 1
#define TRACE_NBD_INIT_TRAILING_BYTES_ENABLED 1
#define TRACE_NBD_INIT_SET_READONLY_ENABLED 1
#define TRACE_NBD_INIT_FINISH_ENABLED 1
#define TRACE_NBD_CLIENT_LOOP_ENABLED 1
#define TRACE_NBD_CLIENT_LOOP_RET_ENABLED 1
#define TRACE_NBD_CLIENT_CLEAR_QUEUE_ENABLED 1
#define TRACE_NBD_CLIENT_CLEAR_SOCKET_ENABLED 1
#define TRACE_NBD_SEND_REQUEST_ENABLED 1
#define TRACE_NBD_RECEIVE_REPLY_ENABLED 1
#define TRACE_NBD_NEGOTIATE_SEND_REP_LEN_ENABLED 1
#define TRACE_NBD_NEGOTIATE_SEND_REP_ERR_ENABLED 1
#define TRACE_NBD_NEGOTIATE_SEND_REP_LIST_ENABLED 1
#define TRACE_NBD_NEGOTIATE_HANDLE_EXPORT_NAME_ENABLED 1
#define TRACE_NBD_NEGOTIATE_HANDLE_EXPORT_NAME_REQUEST_ENABLED 1
#define TRACE_NBD_NEGOTIATE_SEND_INFO_ENABLED 1
#define TRACE_NBD_NEGOTIATE_HANDLE_INFO_REQUESTS_ENABLED 1
#define TRACE_NBD_NEGOTIATE_HANDLE_INFO_REQUEST_ENABLED 1
#define TRACE_NBD_NEGOTIATE_HANDLE_INFO_BLOCK_SIZE_ENABLED 1
#define TRACE_NBD_NEGOTIATE_HANDLE_STARTTLS_ENABLED 1
#define TRACE_NBD_NEGOTIATE_HANDLE_STARTTLS_HANDSHAKE_ENABLED 1
#define TRACE_NBD_NEGOTIATE_OPTIONS_FLAGS_ENABLED 1
#define TRACE_NBD_NEGOTIATE_OPTIONS_CHECK_MAGIC_ENABLED 1
#define TRACE_NBD_NEGOTIATE_OPTIONS_CHECK_OPTION_ENABLED 1
#define TRACE_NBD_NEGOTIATE_BEGIN_ENABLED 1
#define TRACE_NBD_NEGOTIATE_OLD_STYLE_ENABLED 1
#define TRACE_NBD_NEGOTIATE_NEW_STYLE_SIZE_FLAGS_ENABLED 1
#define TRACE_NBD_NEGOTIATE_SUCCESS_ENABLED 1
#define TRACE_NBD_RECEIVE_REQUEST_ENABLED 1
#define TRACE_NBD_SEND_REPLY_ENABLED 1
#define TRACE_NBD_BLK_AIO_ATTACHED_ENABLED 1
#define TRACE_NBD_BLK_AIO_DETACH_ENABLED 1
#define TRACE_NBD_CO_SEND_REPLY_ENABLED 1
#define TRACE_NBD_CO_RECEIVE_REQUEST_DECODE_TYPE_ENABLED 1
#define TRACE_NBD_CO_RECEIVE_REQUEST_PAYLOAD_RECEIVED_ENABLED 1
#define TRACE_NBD_CO_RECEIVE_REQUEST_CMD_WRITE_ENABLED 1
#define TRACE_NBD_TRIP_ENABLED 1
#include "qemu/log.h"


static inline void _nocheck__trace_nbd_unknown_error(int err)
{
    if (trace_event_get_state(TRACE_NBD_UNKNOWN_ERROR)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_unknown_error " "Squashing unexpected error %d to EINVAL" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , err);
    }
}

static inline void trace_nbd_unknown_error(int err)
{
    if (true) {
        _nocheck__trace_nbd_unknown_error(err);
    }
}

static inline void _nocheck__trace_nbd_send_option_request(uint32_t opt, const char * name, uint32_t len)
{
    if (trace_event_get_state(TRACE_NBD_SEND_OPTION_REQUEST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_send_option_request " "Sending option request %" PRIu32" (%s), len %" PRIu32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , opt, name, len);
    }
}

static inline void trace_nbd_send_option_request(uint32_t opt, const char * name, uint32_t len)
{
    if (true) {
        _nocheck__trace_nbd_send_option_request(opt, name, len);
    }
}

static inline void _nocheck__trace_nbd_receive_option_reply(uint32_t option, const char * optname, uint32_t type, const char * typename, uint32_t length)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_OPTION_REPLY)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_option_reply " "Received option reply %" PRIx32" (%s), type %" PRIx32" (%s), len %" PRIu32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , option, optname, type, typename, length);
    }
}

static inline void trace_nbd_receive_option_reply(uint32_t option, const char * optname, uint32_t type, const char * typename, uint32_t length)
{
    if (true) {
        _nocheck__trace_nbd_receive_option_reply(option, optname, type, typename, length);
    }
}

static inline void _nocheck__trace_nbd_reply_err_unsup(uint32_t option, const char * name)
{
    if (trace_event_get_state(TRACE_NBD_REPLY_ERR_UNSUP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_reply_err_unsup " "server doesn't understand request %" PRIx32 " (%s), attempting fallback" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , option, name);
    }
}

static inline void trace_nbd_reply_err_unsup(uint32_t option, const char * name)
{
    if (true) {
        _nocheck__trace_nbd_reply_err_unsup(option, name);
    }
}

static inline void _nocheck__trace_nbd_opt_go_start(const char * name)
{
    if (trace_event_get_state(TRACE_NBD_OPT_GO_START)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_opt_go_start " "Attempting NBD_OPT_GO for export '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name);
    }
}

static inline void trace_nbd_opt_go_start(const char * name)
{
    if (true) {
        _nocheck__trace_nbd_opt_go_start(name);
    }
}

static inline void _nocheck__trace_nbd_opt_go_success(void)
{
    if (trace_event_get_state(TRACE_NBD_OPT_GO_SUCCESS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_opt_go_success " "Export is good to go" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_opt_go_success(void)
{
    if (true) {
        _nocheck__trace_nbd_opt_go_success();
    }
}

static inline void _nocheck__trace_nbd_opt_go_info_unknown(int info, const char * name)
{
    if (trace_event_get_state(TRACE_NBD_OPT_GO_INFO_UNKNOWN)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_opt_go_info_unknown " "Ignoring unknown info %d (%s)" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , info, name);
    }
}

static inline void trace_nbd_opt_go_info_unknown(int info, const char * name)
{
    if (true) {
        _nocheck__trace_nbd_opt_go_info_unknown(info, name);
    }
}

static inline void _nocheck__trace_nbd_opt_go_info_block_size(uint32_t minimum, uint32_t preferred, uint32_t maximum)
{
    if (trace_event_get_state(TRACE_NBD_OPT_GO_INFO_BLOCK_SIZE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_opt_go_info_block_size " "Block sizes are 0x%" PRIx32 ", 0x%" PRIx32 ", 0x%" PRIx32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , minimum, preferred, maximum);
    }
}

static inline void trace_nbd_opt_go_info_block_size(uint32_t minimum, uint32_t preferred, uint32_t maximum)
{
    if (true) {
        _nocheck__trace_nbd_opt_go_info_block_size(minimum, preferred, maximum);
    }
}

static inline void _nocheck__trace_nbd_receive_query_exports_start(const char * wantname)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_QUERY_EXPORTS_START)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_query_exports_start " "Querying export list for '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , wantname);
    }
}

static inline void trace_nbd_receive_query_exports_start(const char * wantname)
{
    if (true) {
        _nocheck__trace_nbd_receive_query_exports_start(wantname);
    }
}

static inline void _nocheck__trace_nbd_receive_query_exports_success(const char * wantname)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_QUERY_EXPORTS_SUCCESS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_query_exports_success " "Found desired export name '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , wantname);
    }
}

static inline void trace_nbd_receive_query_exports_success(const char * wantname)
{
    if (true) {
        _nocheck__trace_nbd_receive_query_exports_success(wantname);
    }
}

static inline void _nocheck__trace_nbd_receive_starttls_request(void)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_STARTTLS_REQUEST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_starttls_request " "Requesting TLS from server" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_receive_starttls_request(void)
{
    if (true) {
        _nocheck__trace_nbd_receive_starttls_request();
    }
}

static inline void _nocheck__trace_nbd_receive_starttls_reply(void)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_STARTTLS_REPLY)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_starttls_reply " "Getting TLS reply from server" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_receive_starttls_reply(void)
{
    if (true) {
        _nocheck__trace_nbd_receive_starttls_reply();
    }
}

static inline void _nocheck__trace_nbd_receive_starttls_new_client(void)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_STARTTLS_NEW_CLIENT)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_starttls_new_client " "TLS request approved, setting up TLS" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_receive_starttls_new_client(void)
{
    if (true) {
        _nocheck__trace_nbd_receive_starttls_new_client();
    }
}

static inline void _nocheck__trace_nbd_receive_starttls_tls_handshake(void)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_STARTTLS_TLS_HANDSHAKE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_starttls_tls_handshake " "Starting TLS handshake" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_receive_starttls_tls_handshake(void)
{
    if (true) {
        _nocheck__trace_nbd_receive_starttls_tls_handshake();
    }
}

static inline void _nocheck__trace_nbd_receive_negotiate(void * tlscreds, const char * hostname)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_NEGOTIATE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_negotiate " "Receiving negotiation tlscreds=%p hostname=%s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , tlscreds, hostname);
    }
}

static inline void trace_nbd_receive_negotiate(void * tlscreds, const char * hostname)
{
    if (true) {
        _nocheck__trace_nbd_receive_negotiate(tlscreds, hostname);
    }
}

static inline void _nocheck__trace_nbd_receive_negotiate_magic(uint64_t magic)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_NEGOTIATE_MAGIC)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_negotiate_magic " "Magic is 0x%" PRIx64 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , magic);
    }
}

static inline void trace_nbd_receive_negotiate_magic(uint64_t magic)
{
    if (true) {
        _nocheck__trace_nbd_receive_negotiate_magic(magic);
    }
}

static inline void _nocheck__trace_nbd_receive_negotiate_server_flags(uint32_t globalflags)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_NEGOTIATE_SERVER_FLAGS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_negotiate_server_flags " "Global flags are %" PRIx32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , globalflags);
    }
}

static inline void trace_nbd_receive_negotiate_server_flags(uint32_t globalflags)
{
    if (true) {
        _nocheck__trace_nbd_receive_negotiate_server_flags(globalflags);
    }
}

static inline void _nocheck__trace_nbd_receive_negotiate_default_name(void)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_NEGOTIATE_DEFAULT_NAME)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_negotiate_default_name " "Using default NBD export name \"\"" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_receive_negotiate_default_name(void)
{
    if (true) {
        _nocheck__trace_nbd_receive_negotiate_default_name();
    }
}

static inline void _nocheck__trace_nbd_receive_negotiate_size_flags(uint64_t size, uint16_t flags)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_NEGOTIATE_SIZE_FLAGS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_negotiate_size_flags " "Size is %" PRIu64 ", export flags %" PRIx16 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , size, flags);
    }
}

static inline void trace_nbd_receive_negotiate_size_flags(uint64_t size, uint16_t flags)
{
    if (true) {
        _nocheck__trace_nbd_receive_negotiate_size_flags(size, flags);
    }
}

static inline void _nocheck__trace_nbd_init_set_socket(void)
{
    if (trace_event_get_state(TRACE_NBD_INIT_SET_SOCKET)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_init_set_socket " "Setting NBD socket" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_init_set_socket(void)
{
    if (true) {
        _nocheck__trace_nbd_init_set_socket();
    }
}

static inline void _nocheck__trace_nbd_init_set_block_size(unsigned long block_size)
{
    if (trace_event_get_state(TRACE_NBD_INIT_SET_BLOCK_SIZE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_init_set_block_size " "Setting block size to %lu" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , block_size);
    }
}

static inline void trace_nbd_init_set_block_size(unsigned long block_size)
{
    if (true) {
        _nocheck__trace_nbd_init_set_block_size(block_size);
    }
}

static inline void _nocheck__trace_nbd_init_set_size(unsigned long sectors)
{
    if (trace_event_get_state(TRACE_NBD_INIT_SET_SIZE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_init_set_size " "Setting size to %lu block(s)" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , sectors);
    }
}

static inline void trace_nbd_init_set_size(unsigned long sectors)
{
    if (true) {
        _nocheck__trace_nbd_init_set_size(sectors);
    }
}

static inline void _nocheck__trace_nbd_init_trailing_bytes(int ignored_bytes)
{
    if (trace_event_get_state(TRACE_NBD_INIT_TRAILING_BYTES)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_init_trailing_bytes " "Ignoring trailing %d bytes of export" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , ignored_bytes);
    }
}

static inline void trace_nbd_init_trailing_bytes(int ignored_bytes)
{
    if (true) {
        _nocheck__trace_nbd_init_trailing_bytes(ignored_bytes);
    }
}

static inline void _nocheck__trace_nbd_init_set_readonly(void)
{
    if (trace_event_get_state(TRACE_NBD_INIT_SET_READONLY)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_init_set_readonly " "Setting readonly attribute" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_init_set_readonly(void)
{
    if (true) {
        _nocheck__trace_nbd_init_set_readonly();
    }
}

static inline void _nocheck__trace_nbd_init_finish(void)
{
    if (trace_event_get_state(TRACE_NBD_INIT_FINISH)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_init_finish " "Negotiation ended" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_init_finish(void)
{
    if (true) {
        _nocheck__trace_nbd_init_finish();
    }
}

static inline void _nocheck__trace_nbd_client_loop(void)
{
    if (trace_event_get_state(TRACE_NBD_CLIENT_LOOP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_client_loop " "Doing NBD loop" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_client_loop(void)
{
    if (true) {
        _nocheck__trace_nbd_client_loop();
    }
}

static inline void _nocheck__trace_nbd_client_loop_ret(int ret, const char * error)
{
    if (trace_event_get_state(TRACE_NBD_CLIENT_LOOP_RET)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_client_loop_ret " "NBD loop returned %d: %s" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , ret, error);
    }
}

static inline void trace_nbd_client_loop_ret(int ret, const char * error)
{
    if (true) {
        _nocheck__trace_nbd_client_loop_ret(ret, error);
    }
}

static inline void _nocheck__trace_nbd_client_clear_queue(void)
{
    if (trace_event_get_state(TRACE_NBD_CLIENT_CLEAR_QUEUE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_client_clear_queue " "Clearing NBD queue" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_client_clear_queue(void)
{
    if (true) {
        _nocheck__trace_nbd_client_clear_queue();
    }
}

static inline void _nocheck__trace_nbd_client_clear_socket(void)
{
    if (trace_event_get_state(TRACE_NBD_CLIENT_CLEAR_SOCKET)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_client_clear_socket " "Clearing NBD socket" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_client_clear_socket(void)
{
    if (true) {
        _nocheck__trace_nbd_client_clear_socket();
    }
}

static inline void _nocheck__trace_nbd_send_request(uint64_t from, uint32_t len, uint64_t handle, uint16_t flags, uint16_t type, const char * name)
{
    if (trace_event_get_state(TRACE_NBD_SEND_REQUEST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_send_request " "Sending request to server: { .from = %" PRIu64", .len = %" PRIu32 ", .handle = %" PRIu64 ", .flags = %" PRIx16 ", .type = %" PRIu16 " (%s) }" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , from, len, handle, flags, type, name);
    }
}

static inline void trace_nbd_send_request(uint64_t from, uint32_t len, uint64_t handle, uint16_t flags, uint16_t type, const char * name)
{
    if (true) {
        _nocheck__trace_nbd_send_request(from, len, handle, flags, type, name);
    }
}

static inline void _nocheck__trace_nbd_receive_reply(uint32_t magic, int32_t error, uint64_t handle)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_REPLY)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_reply " "Got reply: { magic = 0x%" PRIx32 ", .error = % " PRId32 ", handle = %" PRIu64" }" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , magic, error, handle);
    }
}

static inline void trace_nbd_receive_reply(uint32_t magic, int32_t error, uint64_t handle)
{
    if (true) {
        _nocheck__trace_nbd_receive_reply(magic, error, handle);
    }
}

static inline void _nocheck__trace_nbd_negotiate_send_rep_len(uint32_t opt, const char * optname, uint32_t type, const char * typename, uint32_t len)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_SEND_REP_LEN)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_send_rep_len " "Reply opt=%" PRIx32 " (%s), type=%" PRIx32 " (%s), len=%" PRIu32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , opt, optname, type, typename, len);
    }
}

static inline void trace_nbd_negotiate_send_rep_len(uint32_t opt, const char * optname, uint32_t type, const char * typename, uint32_t len)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_send_rep_len(opt, optname, type, typename, len);
    }
}

static inline void _nocheck__trace_nbd_negotiate_send_rep_err(const char * msg)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_SEND_REP_ERR)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_send_rep_err " "sending error message \"%s\"" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , msg);
    }
}

static inline void trace_nbd_negotiate_send_rep_err(const char * msg)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_send_rep_err(msg);
    }
}

static inline void _nocheck__trace_nbd_negotiate_send_rep_list(const char * name, const char * desc)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_SEND_REP_LIST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_send_rep_list " "Advertising export name '%s' description '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name, desc);
    }
}

static inline void trace_nbd_negotiate_send_rep_list(const char * name, const char * desc)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_send_rep_list(name, desc);
    }
}

static inline void _nocheck__trace_nbd_negotiate_handle_export_name(void)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_HANDLE_EXPORT_NAME)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_handle_export_name " "Checking length" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_negotiate_handle_export_name(void)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_handle_export_name();
    }
}

static inline void _nocheck__trace_nbd_negotiate_handle_export_name_request(const char * name)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_HANDLE_EXPORT_NAME_REQUEST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_handle_export_name_request " "Client requested export '%s'" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name);
    }
}

static inline void trace_nbd_negotiate_handle_export_name_request(const char * name)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_handle_export_name_request(name);
    }
}

static inline void _nocheck__trace_nbd_negotiate_send_info(int info, const char * name, uint32_t length)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_SEND_INFO)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_send_info " "Sending NBD_REP_INFO type %d (%s) with remaining length %" PRIu32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , info, name, length);
    }
}

static inline void trace_nbd_negotiate_send_info(int info, const char * name, uint32_t length)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_send_info(info, name, length);
    }
}

static inline void _nocheck__trace_nbd_negotiate_handle_info_requests(int requests)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_HANDLE_INFO_REQUESTS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_handle_info_requests " "Client requested %d items of info" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , requests);
    }
}

static inline void trace_nbd_negotiate_handle_info_requests(int requests)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_handle_info_requests(requests);
    }
}

static inline void _nocheck__trace_nbd_negotiate_handle_info_request(int request, const char * name)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_HANDLE_INFO_REQUEST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_handle_info_request " "Client requested info %d (%s)" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , request, name);
    }
}

static inline void trace_nbd_negotiate_handle_info_request(int request, const char * name)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_handle_info_request(request, name);
    }
}

static inline void _nocheck__trace_nbd_negotiate_handle_info_block_size(uint32_t minimum, uint32_t preferred, uint32_t maximum)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_HANDLE_INFO_BLOCK_SIZE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_handle_info_block_size " "advertising minimum 0x%" PRIx32 ", preferred 0x%" PRIx32 ", maximum 0x%" PRIx32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , minimum, preferred, maximum);
    }
}

static inline void trace_nbd_negotiate_handle_info_block_size(uint32_t minimum, uint32_t preferred, uint32_t maximum)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_handle_info_block_size(minimum, preferred, maximum);
    }
}

static inline void _nocheck__trace_nbd_negotiate_handle_starttls(void)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_HANDLE_STARTTLS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_handle_starttls " "Setting up TLS" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_negotiate_handle_starttls(void)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_handle_starttls();
    }
}

static inline void _nocheck__trace_nbd_negotiate_handle_starttls_handshake(void)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_HANDLE_STARTTLS_HANDSHAKE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_handle_starttls_handshake " "Starting TLS handshake" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_negotiate_handle_starttls_handshake(void)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_handle_starttls_handshake();
    }
}

static inline void _nocheck__trace_nbd_negotiate_options_flags(uint32_t flags)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_OPTIONS_FLAGS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_options_flags " "Received client flags 0x%" PRIx32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , flags);
    }
}

static inline void trace_nbd_negotiate_options_flags(uint32_t flags)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_options_flags(flags);
    }
}

static inline void _nocheck__trace_nbd_negotiate_options_check_magic(uint64_t magic)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_OPTIONS_CHECK_MAGIC)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_options_check_magic " "Checking opts magic 0x%" PRIx64 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , magic);
    }
}

static inline void trace_nbd_negotiate_options_check_magic(uint64_t magic)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_options_check_magic(magic);
    }
}

static inline void _nocheck__trace_nbd_negotiate_options_check_option(uint32_t option, const char * name)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_OPTIONS_CHECK_OPTION)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_options_check_option " "Checking option 0x%" PRIx32 " (%s)" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , option, name);
    }
}

static inline void trace_nbd_negotiate_options_check_option(uint32_t option, const char * name)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_options_check_option(option, name);
    }
}

static inline void _nocheck__trace_nbd_negotiate_begin(void)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_BEGIN)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_begin " "Beginning negotiation" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_negotiate_begin(void)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_begin();
    }
}

static inline void _nocheck__trace_nbd_negotiate_old_style(uint64_t size, unsigned flags)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_OLD_STYLE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_old_style " "advertising size %" PRIu64 " and flags %x" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , size, flags);
    }
}

static inline void trace_nbd_negotiate_old_style(uint64_t size, unsigned flags)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_old_style(size, flags);
    }
}

static inline void _nocheck__trace_nbd_negotiate_new_style_size_flags(uint64_t size, unsigned flags)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_NEW_STYLE_SIZE_FLAGS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_new_style_size_flags " "advertising size %" PRIu64 " and flags %x" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , size, flags);
    }
}

static inline void trace_nbd_negotiate_new_style_size_flags(uint64_t size, unsigned flags)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_new_style_size_flags(size, flags);
    }
}

static inline void _nocheck__trace_nbd_negotiate_success(void)
{
    if (trace_event_get_state(TRACE_NBD_NEGOTIATE_SUCCESS)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_negotiate_success " "Negotiation succeeded" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_negotiate_success(void)
{
    if (true) {
        _nocheck__trace_nbd_negotiate_success();
    }
}

static inline void _nocheck__trace_nbd_receive_request(uint32_t magic, uint16_t flags, uint16_t type, uint64_t from, uint32_t len)
{
    if (trace_event_get_state(TRACE_NBD_RECEIVE_REQUEST)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_receive_request " "Got request: { magic = 0x%" PRIx32 ", .flags = %" PRIx16 ", .type = %" PRIx16 ", from = %" PRIu64 ", len = %" PRIu32 " }" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , magic, flags, type, from, len);
    }
}

static inline void trace_nbd_receive_request(uint32_t magic, uint16_t flags, uint16_t type, uint64_t from, uint32_t len)
{
    if (true) {
        _nocheck__trace_nbd_receive_request(magic, flags, type, from, len);
    }
}

static inline void _nocheck__trace_nbd_send_reply(int32_t error, uint64_t handle)
{
    if (trace_event_get_state(TRACE_NBD_SEND_REPLY)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_send_reply " "Sending response to client: { .error = %" PRId32 ", handle = %" PRIu64 " }" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , error, handle);
    }
}

static inline void trace_nbd_send_reply(int32_t error, uint64_t handle)
{
    if (true) {
        _nocheck__trace_nbd_send_reply(error, handle);
    }
}

static inline void _nocheck__trace_nbd_blk_aio_attached(const char * name, void * ctx)
{
    if (trace_event_get_state(TRACE_NBD_BLK_AIO_ATTACHED)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_blk_aio_attached " "Export %s: Attaching clients to AIO context %p\n" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name, ctx);
    }
}

static inline void trace_nbd_blk_aio_attached(const char * name, void * ctx)
{
    if (true) {
        _nocheck__trace_nbd_blk_aio_attached(name, ctx);
    }
}

static inline void _nocheck__trace_nbd_blk_aio_detach(const char * name, void * ctx)
{
    if (trace_event_get_state(TRACE_NBD_BLK_AIO_DETACH)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_blk_aio_detach " "Export %s: Detaching clients from AIO context %p\n" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , name, ctx);
    }
}

static inline void trace_nbd_blk_aio_detach(const char * name, void * ctx)
{
    if (true) {
        _nocheck__trace_nbd_blk_aio_detach(name, ctx);
    }
}

static inline void _nocheck__trace_nbd_co_send_reply(uint64_t handle, uint32_t error, int len)
{
    if (trace_event_get_state(TRACE_NBD_CO_SEND_REPLY)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_co_send_reply " "Send reply: handle = %" PRIu64 ", error = %" PRIu32 ", len = %d" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , handle, error, len);
    }
}

static inline void trace_nbd_co_send_reply(uint64_t handle, uint32_t error, int len)
{
    if (true) {
        _nocheck__trace_nbd_co_send_reply(handle, error, len);
    }
}

static inline void _nocheck__trace_nbd_co_receive_request_decode_type(uint64_t handle, uint16_t type, const char * name)
{
    if (trace_event_get_state(TRACE_NBD_CO_RECEIVE_REQUEST_DECODE_TYPE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_co_receive_request_decode_type " "Decoding type: handle = %" PRIu64 ", type = %" PRIu16 " (%s)" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , handle, type, name);
    }
}

static inline void trace_nbd_co_receive_request_decode_type(uint64_t handle, uint16_t type, const char * name)
{
    if (true) {
        _nocheck__trace_nbd_co_receive_request_decode_type(handle, type, name);
    }
}

static inline void _nocheck__trace_nbd_co_receive_request_payload_received(uint64_t handle, uint32_t len)
{
    if (trace_event_get_state(TRACE_NBD_CO_RECEIVE_REQUEST_PAYLOAD_RECEIVED)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_co_receive_request_payload_received " "Payload received: handle = %" PRIu64 ", len = %" PRIu32 "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , handle, len);
    }
}

static inline void trace_nbd_co_receive_request_payload_received(uint64_t handle, uint32_t len)
{
    if (true) {
        _nocheck__trace_nbd_co_receive_request_payload_received(handle, len);
    }
}

static inline void _nocheck__trace_nbd_co_receive_request_cmd_write(uint32_t len)
{
    if (trace_event_get_state(TRACE_NBD_CO_RECEIVE_REQUEST_CMD_WRITE)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_co_receive_request_cmd_write " "Reading %" PRIu32 " byte(s)" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      , len);
    }
}

static inline void trace_nbd_co_receive_request_cmd_write(uint32_t len)
{
    if (true) {
        _nocheck__trace_nbd_co_receive_request_cmd_write(len);
    }
}

static inline void _nocheck__trace_nbd_trip(void)
{
    if (trace_event_get_state(TRACE_NBD_TRIP)) {
        struct timeval _now;
        gettimeofday(&_now, NULL);
        qemu_log_mask(LOG_TRACE,
                      "%d@%zd.%06zd:nbd_trip " "Reading request" "\n",
                      getpid(),
                      (size_t)_now.tv_sec, (size_t)_now.tv_usec
                      );
    }
}

static inline void trace_nbd_trip(void)
{
    if (true) {
        _nocheck__trace_nbd_trip();
    }
}
#endif /* TRACE_NBD_GENERATED_TRACERS_H */
